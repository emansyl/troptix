// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    events        Event[]
    tickets       Ticket[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Event {
    id          Int               @id @default(autoincrement())
    title       String
    description String?
    date        DateTime
    location    String?
    organizer   User              @relation(fields: [organizerId], references: [id])
    organizerId String
    createdAt   DateTime          @default(now())
    ticketTypes EventTicketType[]

     @@unique([id])
    @@index([organizerId])
}

model TicketType {
    id          Int               @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime          @default(now())
    eventTypes  EventTicketType[]
}

model EventTicketType {
    eventId      Int @unique
    event        Event      @relation(fields: [eventId], references: [id])
    ticketTypeId Int
    ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
    price        Float
    tickets      Ticket[]

    @@unique([eventId, ticketTypeId])
    @@id([eventId, ticketTypeId])
    @@index([ticketTypeId])
}

model Ticket {
    id                Int             @id @default(autoincrement())
    userId            String
    user              User            @relation(fields: [userId], references: [id])
    eventTicketTypeId Int
    eventTicketType   EventTicketType @relation(fields: [eventTicketTypeId], references: [eventId])
    purchasedAt       DateTime?
    createdAt         DateTime        @default(now())

    @@index([userId])
    @@index([eventTicketTypeId])
}
